<?php

namespace Bendt\Courier\Providers\RajaOngkir;

use GuzzleHttp\Client;

class RajaOngkirService
{

    protected $BASE_URL = '';
    protected $API_KEY = '';
    protected $options = [];
    protected $couriers = [];
    protected $intCouriers = [];

    public function __construct()
    {
        $this->BASE_API = config('bendt-courier.providers.raja_ongkir.base_api','https://pro.rajaongkir.com/api/');
        $this->API_KEY = config('octabit-courier.raja_ongkir.api_key');
        if($this->API_KEY === '') {
            throw new \Exception("Please set Raja Ongkir API Key in the config file generated by 'php artisan vendor:publish --tag=config'");
        }

        $this->options = [
            'headers' => [
                'key' => $this->API_KEY
            ],
            'base_uri' => $this->BASE_API
        ];

        $this->couriers = implode(',',config('bendt-courier.couriers',['jne']));
    }

    public function getProvinces($id = null)
    {
        $this->options['query'] = ['id' => $id];

        $client =  new Client();
        $res = $client->request('GET', 'province', $this->options);

        return $this->transformResponse($res);
    }

    public function getCities($province_id = null, $city_id = null)
    {
        $this->options['query'] = [
            'id' => $city_id,
            'province' => $province_id,
        ];

        // Initiate HTTP Client and send request
        $client =  new Client();
        $res = $client->request('GET', 'city', $this->options);

        return $this->transformResponse($res);
    }

    public function getDeliveryCosts($data)
    {
        try {
            //Set Active Courier
            $data['courier'] = $this->couriers;

            if(!isset($data['originType'])) $data['originType'] = 'city';
            if(!isset($data['origin'])) $data['origin'] = config('bendt-courier.providers.raja_ongkir.default_sender_city_id',155);

            // Create request options
            $this->options['headers']['content-type'] = 'application/x-www-form-urlencoded';
            $this->options['form_params'] = $data;

            // Initiate HTTP Client and send request
            $client =  new Client();
            $res = $client->request('POST', 'cost', $this->options);

            return $this->transformResponse($res);
        } catch (\Exception $exception) {

        }
    }

    public function getInternationalDeliveryCosts($data)
    {
        try {
            //Set Active Courier
            $data['courier'] = $this->couriers;

            if(!isset($data['originType'])) $data['originType'] = 'city';
            if(!isset($data['origin'])) $data['origin'] = config('bendt-courier.providers.raja_ongkir.default_sender_city_id',155);

            // Create request options
            $this->options['headers']['content-type'] = 'application/x-www-form-urlencoded';
            $this->options['form_params'] = $data;

            // Initiate HTTP Client and send request
            $client =  new Client();
            $res = $client->request('POST', 'cost', $this->options);

            return $this->transformResponse($res);
        } catch (\Exception $exception) {

        }
    }

    public function getDeliveryStatus($receipt_no)
    {
        try {

            //Set Active Courier
            $data['courier'] = $this->couriers;

            // Create request options
            $this->options['headers']['content-type'] = 'application/x-www-form-urlencoded';
            $this->options['form_params'] = $data;

            // Initiate HTTP Client and send request
            $client =  new Client();
            $res = $client->request('POST', 'waybill', $this->options);

            return $this->transformResponse($res);
        } catch (\Exception $exception) {

        }
    }

    protected function transformResponse($res)
    {
        // Retrieve Body From response and convert to Object
        $body = json_decode((string)$res->getBody());

        $status = $body->rajaongkir->status;
        if($status->code == 200) {
            return $body->rajaongkir->results;
        }
        else {
            throw new \Exception($status->description);
        }
    }
}
